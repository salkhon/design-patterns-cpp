Gamma Categorization
    Design patterns are typically split into three categories. 
    This is called Gamme Categorization after Erich Gamma one of the gang of four authors.

    1. Creatal Patterns
        Deal with the creatoin (construction) of objects
        - Explicit (constructor) vs implicit (DI, reflection etc). 
        - Wholesale (single statement) vs pievewise (step by step). 
    
    2. Structural Patterns
        Concerned with the structure (eg class members)
        Many patterns are wrappers that mimic the underlying class' interface. 
        Stress the importance of good API design. 

    3. Behavioral Patterns 
        They are all different; no central theme. 

    
Builder:
    - Some objects are simple and can be created in a single contructor call
    - Other objects require a lot of ceremony to create. 
    For examples, string from different pieces - string builder. Lets you construct an object 
    piece by piece. 
    - Having an object with 10 constructor arguments is not productive.
    - Builder provides an API for constructing an object step by step. 

    When piecewise object construction is complicated, provide an API for doing it succintly. 

    Creating an object with a dedicated special component, different from the actual object created. 
    That separate dedicated component for creation has special functions to help the process of 
    creation. 


    Fluent Builder:
        Return the constructed object on building methods. 

    Groovy-Style Builder:
        Nested instantiation reflecting the nested structure of the object. 

    Builder Facade:
        Different parts of the object using different builders. All subtypes of a central
        builder. They refer to one object hosted on the central builder. That has methods
        to traverse from one builder to the other. 

Factory:
    - A factory method isa static method that creates objects
    - A factory can take care of object creation (single responsibility pattern)
    - A factory can be external or reside inside the object as an inner class. 
    Nested allows to preserve open-close principle. 
    - Hierarchies of factories can be used to create related objects. 

Prototype:
    - To implement a prototype, partially construct an object and store it somewhere. 
    - Clone the prototype
        . Implement your own deep copy. or, 
        . Serialize and deserialize, they traverse the entire object graph. 
    - Customize the resulting instance. 


Singleton:
    - Making a "safe" singleton is easy
        . Hide or delete the type's constructor, copy constructor and copy assignment operator. 
        . Create a static method that returns a reference to a static member. 
        . Guaranteed to be thread-safe since C++11. (You are not going to call the getter on two
        threads and end up constructing 2 objects. That won't happen.)
    - Types with "hard" dependencies on singletons are difficult to test. 
        . Cannot decouple the singleton and supply a fake object.
    - Instead of directly using a singleton, consider depending on an abstraction (eg, an interface)
    - Consider defining lifetime in Dependency Injection container.
    - Multiton.






2. Structural Patterns

Adapter:
    - Implementing an Adapter is easy
    - Determin the API you have and the API you need. 
    - Create a component which aggregates (has a reference to, ...) the adaptee.
    - Itermediate representations can pile up: use caching and other optimizations. 


Bridge:
    - Decouple abstraction from implementation. 
    - Both can exist as hierarchies. 
    - A stronger form of encapsulation. 